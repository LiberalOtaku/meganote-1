{"version":3,"sources":["bundle.js","app.module.js","layout/layout.module.js","notes/notes.module.js","notesForm/notesForm.module.js","signIn/signIn.module.js","signUp/signUp.module.js","users/users.module.js","constants.js","core/auth.interceptor.js","layout/directives/header.directive.js","notes/note.service.js","notes/notes.config.js","notes/notes.controller.js","notes/notes.service.js","notesForm/directives/notesForm.directive.js","notesForm/notesForm.config.js","notesForm/notesForm.controller.js","signIn/signIn.directive.js","signUp/signUp.directive.js","users/authToken.service.js","users/currentUser.service.js","users/directives/profile.directive.js","users/directives/userLinks.directive.js","users/route.config.js","users/users.service.js"],"names":["_classCallCheck","instance","Constructor","TypeError","configFunction","$urlRouterProvider","otherwise","run","$rootScope","$state","$on","go","angular","module","config","$inject","constant","AuthInterceptor","AuthToken","DATABASE_URL","request","req","token","get","url","includes","headers","Authorization","authConfig","$httpProvider","interceptors","push","factory","myHeader","restrict","templateUrl","controller","NavbarController","controllerAs","bindToController","scope","vm","this","isLoggedIn","logout","clear","directive","Note","$resource","update","method","notesConfig","$stateProvider","state","resolve","authenticated","data","title","CurrentUser","Promise","reject","NotesController","refresh","query","$promise","then","notes","NotesService","$http","getNotes","notesPromise","notesURL","res","service","create","note","post","unshift","put","_id","removeById","deleteNote","id","i","length","splice","find","copy","myNotesForm","notesFormConfig","template","NotesFormController","$scope","Flash","params","noteId","clearForm","body_html","saveNote","loading","$update","$save","$delete","undefined","save","$parent","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","UsersService","SignInController","value","login","user","error","message","SignUpController","$window","localStorage","getItem","setItem","removeItem","JSON","parse","stringify","UserProfileController","UserLinksController","usersConfig","onExit","usersURL","set","authToken"],"mappings":"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","file":"bundle.js","sourcesContent":["'use strict';{var configFunction=function configFunction($urlRouterProvider){$urlRouterProvider.otherwise('/notes/');};var run=function run($rootScope,$state){$rootScope.$on('$stateChangeSuccess',function(){return $rootScope.$state=$state;});$rootScope.$on('$stateChangeError',function(){return $state.go('sign-in');});};angular.module('meganote',[// Angular modules\n'ui.router',// Third-party modules\n'ngFlash','textAngular','angularSpinner','ngResource',// Custom modules\n'meganote.notes','meganote.notesForm','meganote.layout','meganote.signUp','meganote.signIn','meganote.users']).config(configFunction).run(run);configFunction.$inject=['$urlRouterProvider'];run.$inject=['$rootScope','$state'];}\n'use strict';{angular.module('meganote.layout',[]);}\n'use strict';{angular.module('meganote.notes',['ui.router']);}\n'use strict';{angular.module('meganote.notesForm',[]);}\n'use strict';{angular.module('meganote.signIn',[]);}\n'use strict';{angular.module('meganote.signUp',[]);}\n'use strict';{angular.module('meganote.users',[]);}\n'use strict';{angular.module('meganote').constant('DATABASE_URL','https://shrouded-mountain-90850.herokuapp.com/api/v1/');}\n'use strict';{var AuthInterceptor=function AuthInterceptor(AuthToken,DATABASE_URL){return{request:function request(req){var token=AuthToken.get();if(token&&req.url.includes(DATABASE_URL)){req.headers.Authorization=token;}return req;}};};var authConfig=function authConfig($httpProvider){return $httpProvider.interceptors.push('AuthInterceptor');};angular.module('meganote').factory('AuthInterceptor',AuthInterceptor).config(authConfig);AuthInterceptor.$inject=['AuthToken','DATABASE_URL'];authConfig.$inject=['$httpProvider'];}\n'use strict';{(function(){var myHeader=function myHeader(){return{restrict:'AE',templateUrl:'layout/directives/header.html',controller:NavbarController,controllerAs:'vm',bindToController:true,scope:{}};};var NavbarController=function NavbarController(AuthToken){var vm=this;vm.isLoggedIn=AuthToken.get;vm.logout=AuthToken.clear;};angular.module('meganote.layout').directive('myHeader',myHeader);NavbarController.$inject=['AuthToken'];})();}\n'use strict';{var Note=function Note($resource,DATABASE_URL){return $resource(DATABASE_URL+'notes/:id',null,{update:{method:'PUT'}});};angular.module('meganote.notes').factory('Note',Note);Note.$inject=['$resource','DATABASE_URL'];}\n'use strict';{(function(){var notesConfig=function notesConfig($stateProvider){$stateProvider.state('notes',{url:'/notes',templateUrl:'notes/notes.html',controller:'NotesController',controllerAs:'vm',resolve:{authenticated:authenticated},data:{title:'Notes'}});};var authenticated=function authenticated(CurrentUser){return new Promise(function(resolve,reject){if(CurrentUser.isLoggedIn()){resolve();}else{reject();}});};angular.module('meganote.notes').config(notesConfig);notesConfig.$inject=['$stateProvider'];authenticated.$inject=['CurrentUser'];})();}\n'use strict';{var NotesController=function NotesController(Note){var vm=this;vm.notes=Note.query();vm.refresh=refresh;/////////////////////\nfunction refresh(){Note.query().$promise.then(function(notes){return vm.notes=notes;});}};angular.module('meganote.notes').controller('NotesController',NotesController);NotesController.$inject=['Note'];}\n'use strict';{var NotesService=function NotesService($http,DATABASE_URL){var notesURL=DATABASE_URL+'notes/';var service={notes:[],getNotes:getNotes,create:create,update:update,deleteNote:deleteNote,removeById:removeById,find:find};return service;///////////////\nfunction getNotes(){var notesPromise=$http.get(notesURL);notesPromise.then(function(res){return service.notes=res.data;});return notesPromise;}function create(note){var notesPromise=$http.post(notesURL,{note:note});notesPromise.then(function(res){return service.notes.unshift(res.data.note);});return notesPromise;}function update(note){var notesPromise=$http.put(''+notesURL+note._id,{note:note});notesPromise.then(function(res){service.removeById(res.data.note._id);service.notes.unshift(res.data.note);});return notesPromise;}function deleteNote(note){var notesPromise=$http.delete(''+notesURL+note._id);notesPromise.then(function(res){return service.removeById(res.data.note._id);});return notesPromise;}function removeById(id){for(var i=0;i<service.notes.length;i++){if(service.notes[i]._id===id){return service.notes.splice(i,1);}}}function find(id){for(var i=0;i<service.notes.length;i++){if(service.notes[i]._id===id){return angular.copy(service.notes[i]);}}}};angular.module('meganote.notes').factory('NotesService',NotesService);NotesService.$inject=['$http','DATABASE_URL'];}\n'use strict';{var myNotesForm=function myNotesForm(){return{restrict:'AE',templateUrl:'notesForm/directives/notesForm.html'};};angular.module('meganote.notesForm').directive('myNotesForm',myNotesForm);}\n'use strict';{var notesFormConfig=function notesFormConfig($stateProvider){$stateProvider.state('notes.form',{url:'/:noteId',template:'<div my-notes-form></div>',controller:'NotesFormController',controllerAs:'vm'});};angular.module('meganote.notesForm').config(notesFormConfig);notesFormConfig.$inject=['$stateProvider'];}\n'use strict';{var NotesFormController=function NotesFormController($scope,$state,Flash,Note){var vm=this;vm.note=get();vm.clearForm=clearForm;vm.save=saveNote;vm.deleteNote=deleteNote;vm.refresh=$scope.$parent.vm.refresh;/////////////////////\nfunction get(){if($state.params.noteId){return Note.get({id:$state.params.noteId});}return new Note();}function clearForm(){vm.note={title:'',body_html:''};}function saveNote(){vm.loading=true;if(vm.note._id){vm.note.$update({id:vm.note._id}).then(function(note){vm.refresh();vm.note=note;Flash.create('success','Saved!');$state.go('notes.form',{noteId:vm.note._id});},function(){return Flash.create('danger','Oops! Something went wrong.');}).finally(function(){return vm.loading=false;});}else{vm.note.$save().then(function(note){vm.refresh();vm.note=note;Flash.create('success','Saved!');},function(){return Flash.create('danger','Oops! Something went wrong.');}).finally(function(){return vm.loading=false;});}}function deleteNote(){vm.loading=true;vm.note.$delete({id:vm.note._id}).then(function(){vm.refresh();$state.go('notes.form',{noteId:undefined});}).finally(function(){return vm.loading=false;});}};'use strict';angular.module('meganote.notesForm').controller('NotesFormController',NotesFormController);NotesFormController.$inject=['$scope','$state','Flash','Note'];}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.signIn').directive('mySignIn',['$state','Flash','UsersService',function($state,Flash,UsersService){var SignInController=function(){function SignInController(){_classCallCheck(this,SignInController);}_createClass(SignInController,[{key:'submit',value:function submit(){var vm=this;vm.loading=true;UsersService.login(vm.user).then(function(){return $state.go('notes.form',{noteId:undefined});}).catch(function(error){return Flash.create('danger',error.message);}).finally(function(){return vm.loading=false;});}}]);return SignInController;}();return{restrict:'EA',templateUrl:'signIn/signIn.html',controller:SignInController,controllerAs:'vm',bindToController:true,scope:{}};}]);}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.signUp').directive('mySignUp',['$state','Flash','UsersService',function($state,Flash,UsersService){var SignUpController=function(){function SignUpController(){_classCallCheck(this,SignUpController);this.user={};}_createClass(SignUpController,[{key:'submit',value:function submit(){var vm=this;vm.loading=true;UsersService.create(vm.user).then(function(){return $state.go('notes.form',{noteId:undefined});}).catch(function(error){return Flash.create('danger',error.message);}).finally(function(){return vm.loading=false;});}}]);return SignUpController;}();return{restrict:'EA',templateUrl:'signUp/signUp.html',controller:SignUpController,controllerAs:'vm',bindToController:true,scope:{}};}]);}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.users').service('AuthToken',['$window',function($window){var AuthToken=function(){function AuthToken(){_classCallCheck(this,AuthToken);this.token=$window.localStorage.getItem('authToken');}_createClass(AuthToken,[{key:'set',value:function set(token){this.token=token;$window.localStorage.setItem('authToken',this.token);}},{key:'get',value:function get(){return $window.localStorage.getItem('authToken');}},{key:'clear',value:function clear(){this.token=undefined;$window.localStorage.removeItem('authToken');}}]);return AuthToken;}();return new AuthToken();}]);}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.users').service('CurrentUser',['$window',function($window){var CurrentUser=function(){function CurrentUser(){_classCallCheck(this,CurrentUser);this.user=JSON.parse($window.localStorage.getItem('currentUser'));}_createClass(CurrentUser,[{key:'set',value:function set(user){this.user=user;$window.localStorage.setItem('currentUser',JSON.stringify(this.user));}},{key:'get',value:function get(){return this.user||{};}},{key:'clear',value:function clear(){this.user=undefined;$window.localStorage.removeItem('currentUser');}},{key:'isLoggedIn',value:function isLoggedIn(){return!!this.get()._id;}}]);return CurrentUser;}();return new CurrentUser();}]);}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.users').directive('myUserProfile',['CurrentUser','UsersService','Flash',function(CurrentUser,UsersService,Flash){var UserProfileController=function(){function UserProfileController(){_classCallCheck(this,UserProfileController);var vm=this;vm.user=angular.copy(CurrentUser.get());}_createClass(UserProfileController,[{key:'submit',value:function submit(){var vm=this;vm.loading=true;UsersService.update(vm.user).then(function(){return Flash.create('success','Your changes have been saved!');}).finally(function(){return vm.loading=false;});}}]);return UserProfileController;}();return{restrict:'EA',template:'\\n            <div us-spinner=\"{ top: \\'10%\\' }\" spinner-on=\"vm.loading\"></div>\\n\\n            <div class=\"container\">\\n              <div class=\"row\">\\n                <div class=\"col-xs-6 col-xs-offset-4\">\\n                  <h3>Update Your Profile</h3>\\n                  <form id=\"new_user\" ng-submit=\"vm.submit()\">\\n                    <p>\\n                      <label for=\"name\">Full Name</label><br>\\n                      <input\\n                        type=\"text\"\\n                        name=\"name\"\\n                        autofocus=\"autofocus\"\\n                        ng-model=\"vm.user.name\"\\n                        required>\\n                    </p>\\n                    <p>\\n                      <label for=\"username\">Username</label><br>\\n                      <input\\n                        type=\"text\"\\n                        name=\"username\"\\n                        ng-model=\"vm.user.username\"\\n                        required>\\n                    </p>\\n                    <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\\n                    <span class=\"login\">\\n                      <a ui-sref=\"notes.form({ noteId: undefined })\">Back To My Notes</a>\\n                    </span>\\n\\n                    <flash-message\\n                      duration=\"3000\"\\n                      show-close=\"false\"></flash-message>\\n\\n                  </form>\\n                </div>\\n              </div>\\n            </div>\\n          ',controller:UserProfileController,controllerAs:'vm',bindToController:true,scope:{}};}]);}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.users').directive('userLinks',['CurrentUser','AuthToken',function(CurrentUser,AuthToken){var UserLinksController=function(){function UserLinksController(){_classCallCheck(this,UserLinksController);}_createClass(UserLinksController,[{key:'user',value:function user(){return CurrentUser.get();}},{key:'isLoggedIn',value:function isLoggedIn(){return CurrentUser.isLoggedIn();}},{key:'logout',value:function logout(){CurrentUser.clear();AuthToken.clear();}}]);return UserLinksController;}();return{restrict:'EA',template:'\\n            <div class=\"user-links\">\\n              <span ng-show=\"vm.isLoggedIn()\">\\n                <a ui-sref=\"profile\">Signed in as {{ vm.user().name }}</a>\\n                |\\n                <a ui-sref=\"sign-up\" ng-click=\"vm.logout()\">Log Out</a>\\n              </span>\\n              <span ng-show=\"!vm.isLoggedIn()\">\\n                <a ui-sref=\"sign-up\">Sign Up</a>\\n              </span>\\n            </div>\\n          ',controller:UserLinksController,controllerAs:'vm',bindToController:true,scope:{}};}]);}\n'use strict';{var usersConfig=function usersConfig($stateProvider){$stateProvider.state('sign-up',{url:'/sign-up',template:'<div my-sign-up></div>',onExit:['Flash',function(Flash){return Flash.clear();}],data:{title:'Sign Up'}}).state('sign-in',{url:'/sign-in',template:'<div my-sign-in></div>',onExit:['Flash',function(Flash){return Flash.clear();}],data:{title:'Sign In'}}).state('profile',{url:'/profile',template:'<div my-user-profile></div>',onExit:['Flash',function(Flash){return Flash.clear();}],data:{title:'Profile'}});};angular.module('meganote.users').config(usersConfig);usersConfig.$inject=['$stateProvider'];}\n'use strict';var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}{angular.module('meganote.users').service('UsersService',['$http','DATABASE_URL','AuthToken','CurrentUser',function($http,DATABASE_URL,AuthToken,CurrentUser){var usersURL=DATABASE_URL+'users/';var UsersService=function(){function UsersService(){_classCallCheck(this,UsersService);}_createClass(UsersService,[{key:'create',// Sign Up\nvalue:function create(user){return $http.post(usersURL,{user:user}).then(function(res){AuthToken.set(res.data.authToken);CurrentUser.set(res.data.user);});}// Sign In\n},{key:'login',value:function login(user){return $http.post(DATABASE_URL+'sessions/',{user:user}).then(function(res){AuthToken.set(res.data.authToken);CurrentUser.set(res.data.user);});}// Update Profile\n},{key:'update',value:function update(user){return $http.put(''+usersURL+user._id,{user:user}).then(function(res){return CurrentUser.set(res.data.user);});}}]);return UsersService;}();return new UsersService();}]);}","{\n  angular\n    .module('meganote', [\n      // Angular modules\n      'ui.router',\n\n      // Third-party modules\n      'ngFlash',\n      'textAngular',\n      'angularSpinner',\n      'ngResource',\n\n      // Custom modules\n      'meganote.notes',\n      'meganote.notesForm',\n      'meganote.layout',\n      'meganote.signUp',\n      'meganote.signIn',\n      'meganote.users'\n    ])\n    .config(configFunction)\n    .run(run);\n\n  configFunction.$inject = ['$urlRouterProvider'];\n  function configFunction($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/notes/');\n  }\n\n  run.$inject = ['$rootScope', '$state'];\n  function run($rootScope, $state) {\n    $rootScope.$on('$stateChangeSuccess', () => $rootScope.$state = $state);\n\n    $rootScope.$on('$stateChangeError', () => $state.go('sign-in'));\n  }\n}\n","{\n  angular.module('meganote.layout', []);\n}\n","{\n  angular\n    .module('meganote.notes', [ 'ui.router' ]);\n}\n","{\n  angular.module('meganote.notesForm', []);\n}\n","{\n  angular.module('meganote.signIn', []);\n}\n","{\n  angular.module('meganote.signUp', []);\n}\n","{\n  angular.module('meganote.users', []);\n}\n","{\n  angular\n    .module('meganote')\n    .constant('DATABASE_URL', 'https://shrouded-mountain-90850.herokuapp.com/api/v1/');\n}\n","{\n  angular\n    .module('meganote')\n    .factory('AuthInterceptor', AuthInterceptor)\n    .config(authConfig);\n\n\n  AuthInterceptor.$inject = ['AuthToken', 'DATABASE_URL'];\n  function AuthInterceptor(AuthToken, DATABASE_URL) {\n    return {\n      request(req) {\n        const token = AuthToken.get();\n        if (token && req.url.includes(DATABASE_URL)) {\n          req.headers.Authorization = token;\n        }\n        return req;\n      }\n    };\n  }\n\n  authConfig.$inject = ['$httpProvider'];\n  function authConfig($httpProvider) {\n    return $httpProvider.interceptors.push('AuthInterceptor');\n  }\n}\n","{\n  angular\n    .module('meganote.layout')\n    .directive('myHeader', myHeader);\n\n  function myHeader() {\n    return {\n      restrict: 'AE',\n      templateUrl: 'layout/directives/header.html',\n      controller: NavbarController,\n      controllerAs: 'vm',\n      bindToController: true,\n      scope: {}\n    };\n  }\n\n  NavbarController.$inject = ['AuthToken'];\n  function NavbarController(AuthToken) {\n    var vm = this;\n\n    vm.isLoggedIn = AuthToken.get;\n    vm.logout = AuthToken.clear;\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .factory('Note', Note);\n\n  Note.$inject = ['$resource', 'DATABASE_URL'];\n  function Note($resource, DATABASE_URL) {\n    return $resource(`${DATABASE_URL}notes/:id`, null, {\n      update: { method: 'PUT' },\n    });\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .config(notesConfig);\n\n  notesConfig.$inject = ['$stateProvider'];\n  function notesConfig($stateProvider) {\n    $stateProvider\n      .state('notes', {\n        url: '/notes',\n        templateUrl: 'notes/notes.html',\n        controller: 'NotesController',\n        controllerAs: 'vm',\n        resolve: {\n          authenticated,\n        },\n        data: {\n          title: 'Notes',\n        }\n      });\n  }\n\n  authenticated.$inject = ['CurrentUser'];\n  function authenticated(CurrentUser) {\n    return new Promise((resolve, reject) => {\n      if (CurrentUser.isLoggedIn()) { resolve(); }\n      else { reject(); }\n    });\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .controller('NotesController', NotesController);\n\n  NotesController.$inject = ['Note'];\n  function NotesController(Note) {\n    const vm = this;\n    vm.notes = Note.query();\n    vm.refresh = refresh;\n\n    /////////////////////\n\n    function refresh() {\n      Note.query().$promise.then(notes => vm.notes = notes);\n    }\n  }\n}\n","{\n  angular\n    .module('meganote.notes')\n    .factory('NotesService', NotesService);\n\n  NotesService.$inject = ['$http', 'DATABASE_URL'];\n  function NotesService($http, DATABASE_URL) {\n    const notesURL = `${DATABASE_URL}notes/`;\n    \n    const service = {\n      notes: [],\n      getNotes: getNotes,\n      create: create,\n      update: update,\n      deleteNote: deleteNote,\n      removeById: removeById,\n      find: find\n    };\n\n    return service;\n\n    ///////////////\n\n    function getNotes() {\n      const notesPromise = $http.get(notesURL);\n\n      notesPromise.then(res => service.notes = res.data);\n\n      return notesPromise;\n    }\n\n    function create(note) {\n      const notesPromise = $http.post(notesURL, {\n        note: note\n      });\n\n      notesPromise.then(res => service.notes.unshift(res.data.note));\n\n      return notesPromise;\n    }\n\n    function update(note) {\n      const notesPromise = $http.put(`${notesURL}${note._id}`, {\n        note: note\n      });\n\n      notesPromise\n        .then(res => {\n          service.removeById(res.data.note._id);\n          service.notes.unshift(res.data.note);\n        });\n\n      return notesPromise;\n    }\n\n    function deleteNote(note) {\n      const notesPromise = $http.delete(`${notesURL}${note._id}`);\n\n      notesPromise.then(res => service.removeById(res.data.note._id));\n\n      return notesPromise;\n    }\n\n    function removeById(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return service.notes.splice(i, 1);\n        }\n      }\n    }\n\n    function find(id) {\n      for (let i=0; i < service.notes.length; i++) {\n        if (service.notes[i]._id === id) {\n          return angular.copy(service.notes[i]);\n        }\n      }\n    }\n  }\n}\n","{\n  angular\n    .module('meganote.notesForm')\n    .directive('myNotesForm', myNotesForm);\n\n  function myNotesForm() {\n    return {\n      restrict: 'AE',\n      templateUrl: 'notesForm/directives/notesForm.html'\n    };\n  }\n}\n","{\n  angular\n    .module('meganote.notesForm')\n    .config(notesFormConfig);\n\n  notesFormConfig.$inject = ['$stateProvider'];\n  function notesFormConfig($stateProvider) {\n    $stateProvider\n      .state('notes.form', {\n        url: '/:noteId',\n        template: '<div my-notes-form></div>',\n        controller: 'NotesFormController',\n        controllerAs: 'vm'\n      });\n  }\n}\n","{\n  'use strict';\n\n  angular\n    .module('meganote.notesForm')\n    .controller('NotesFormController', NotesFormController);\n\n  NotesFormController.$inject = ['$scope', '$state', 'Flash', 'Note'];\n  function NotesFormController($scope, $state, Flash, Note) {\n    const vm = this;\n\n    vm.note = get();\n    vm.clearForm = clearForm;\n    vm.save = saveNote;\n    vm.deleteNote = deleteNote;\n    vm.refresh = $scope.$parent.vm.refresh;\n\n    /////////////////////\n\n    function get() {\n      if ($state.params.noteId) {\n        return Note.get({ id: $state.params.noteId });\n      }\n      return new Note();\n    }\n\n    function clearForm() {\n      vm.note = { title: '', body_html: '' };\n    }\n\n    function saveNote() {\n      vm.loading = true;\n      if (vm.note._id) {\n        vm.note\n          .$update({ id: vm.note._id })\n          .then(\n            note => {\n              vm.refresh();\n              vm.note = note;\n              Flash.create('success', 'Saved!');\n              $state.go('notes.form', { noteId: vm.note._id });\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          )\n          .finally(() => vm.loading = false);\n      }\n      else {\n        vm.note\n          .$save()\n          .then(\n            note => {\n              vm.refresh();\n              vm.note = note;\n              Flash.create('success', 'Saved!');\n            },\n            () => Flash.create('danger', 'Oops! Something went wrong.')\n          )\n          .finally(() => vm.loading = false);\n      }\n    }\n\n    function deleteNote() {\n      vm.loading = true;\n      vm.note\n        .$delete({ id: vm.note._id })\n        .then(() => {\n          vm.refresh();\n          $state.go('notes.form', { noteId: undefined });\n        })\n        .finally(() => vm.loading = false);\n    }\n  }\n}\n","{\n  angular\n    .module('meganote.signIn')\n    .directive('mySignIn', [\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        class SignInController {\n          submit() {\n            var vm = this;\n            vm.loading = true;\n            UsersService\n              .login(vm.user)\n              .then(() => $state.go('notes.form', { noteId: undefined }))\n              .catch(error => Flash.create('danger', error.message))\n              .finally(() => vm.loading = false);\n          }\n        }\n\n        return {\n          restrict: 'EA',\n          templateUrl: 'signIn/signIn.html',\n          controller: SignInController,\n          controllerAs: 'vm',\n          bindToController: true,\n          scope: {},\n        };\n      }]);\n}\n","{\n  angular\n    .module('meganote.signUp')\n    .directive('mySignUp', [\n      '$state',\n      'Flash',\n      'UsersService',\n      ($state, Flash, UsersService) => {\n\n        class SignUpController {\n          constructor() {\n            this.user = {};\n          }\n\n          submit() {\n            var vm = this;\n            vm.loading = true;\n            UsersService\n              .create(vm.user)\n              .then(() => $state.go('notes.form', { noteId: undefined }))\n              .catch(error => Flash.create('danger', error.message))\n              .finally(() => vm.loading = false);\n          }\n        }\n\n        return {\n          restrict: 'EA',\n          templateUrl: 'signUp/signUp.html',\n          controller: SignUpController,\n          controllerAs: 'vm',\n          bindToController: true,\n          scope: {},\n        };\n      }]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('AuthToken', ['$window', $window => {\n\n      class AuthToken {\n        constructor() {\n          this.token = $window.localStorage.getItem('authToken');\n        }\n\n        set(token) {\n          this.token = token;\n          $window.localStorage.setItem('authToken', this.token);\n        }\n\n        get() {\n          return $window.localStorage.getItem('authToken');\n        }\n\n        clear() {\n          this.token = undefined;\n          $window.localStorage.removeItem('authToken');\n        }\n      }\n\n      return new AuthToken();\n    }]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('CurrentUser', [ '$window', ($window) => {\n\n      class CurrentUser {\n        constructor() {\n          this.user = JSON.parse($window.localStorage.getItem('currentUser'));\n        }\n\n        set(user) {\n          this.user = user;\n          $window.localStorage.setItem('currentUser', JSON.stringify(this.user));\n        }\n\n        get() {\n          return this.user || {};\n        }\n\n        clear() {\n          this.user = undefined;\n          $window.localStorage.removeItem('currentUser');\n        }\n\n        isLoggedIn() {\n          return !!(this.get()._id);\n        }\n      }\n\n      return new CurrentUser();\n    }]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .directive('myUserProfile', [\n      'CurrentUser',\n      'UsersService',\n      'Flash',\n      (CurrentUser, UsersService, Flash) => {\n        class UserProfileController {\n          constructor() {\n            var vm = this;\n            vm.user = angular.copy(CurrentUser.get());\n          }\n\n          submit() {\n            var vm = this;\n            vm.loading = true;\n            UsersService\n              .update(vm.user)\n              .then(() => Flash.create('success', 'Your changes have been saved!'))\n              .finally(() => vm.loading = false);\n          }\n        }\n\n        return {\n          restrict: 'EA',\n          template: `\n            <div us-spinner=\"{ top: '10%' }\" spinner-on=\"vm.loading\"></div>\n\n            <div class=\"container\">\n              <div class=\"row\">\n                <div class=\"col-xs-6 col-xs-offset-4\">\n                  <h3>Update Your Profile</h3>\n                  <form id=\"new_user\" ng-submit=\"vm.submit()\">\n                    <p>\n                      <label for=\"name\">Full Name</label><br>\n                      <input\n                        type=\"text\"\n                        name=\"name\"\n                        autofocus=\"autofocus\"\n                        ng-model=\"vm.user.name\"\n                        required>\n                    </p>\n                    <p>\n                      <label for=\"username\">Username</label><br>\n                      <input\n                        type=\"text\"\n                        name=\"username\"\n                        ng-model=\"vm.user.username\"\n                        required>\n                    </p>\n                    <input type=\"submit\" name=\"commit\" value=\"Save Changes\" class=\"btn btn-default\">\n                    <span class=\"login\">\n                      <a ui-sref=\"notes.form({ noteId: undefined })\">Back To My Notes</a>\n                    </span>\n\n                    <flash-message\n                      duration=\"3000\"\n                      show-close=\"false\"></flash-message>\n\n                  </form>\n                </div>\n              </div>\n            </div>\n          `,\n          controller: UserProfileController,\n          controllerAs: 'vm',\n          bindToController: true,\n          scope: {},\n        };\n      }\n    ]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .directive('userLinks', [\n      'CurrentUser',\n      'AuthToken',\n      (CurrentUser, AuthToken) => {\n        class UserLinksController {\n          user() {\n            return CurrentUser.get();\n          }\n\n          isLoggedIn() {\n            return CurrentUser.isLoggedIn();\n          }\n\n          logout() {\n            CurrentUser.clear();\n            AuthToken.clear();\n          }\n        }\n\n        return {\n          restrict: 'EA',\n          template: `\n            <div class=\"user-links\">\n              <span ng-show=\"vm.isLoggedIn()\">\n                <a ui-sref=\"profile\">Signed in as {{ vm.user().name }}</a>\n                |\n                <a ui-sref=\"sign-up\" ng-click=\"vm.logout()\">Log Out</a>\n              </span>\n              <span ng-show=\"!vm.isLoggedIn()\">\n                <a ui-sref=\"sign-up\">Sign Up</a>\n              </span>\n            </div>\n          `,\n          controller: UserLinksController,\n          controllerAs: 'vm',\n          bindToController: true,\n          scope: {},\n        };\n      }\n    ]);\n}\n","{\n  angular\n    .module('meganote.users')\n    .config(usersConfig);\n\n  usersConfig.$inject = ['$stateProvider'];\n  function usersConfig($stateProvider) {\n    $stateProvider\n      .state('sign-up', {\n        url: '/sign-up',\n        template: '<div my-sign-up></div>',\n        onExit: ['Flash', Flash => Flash.clear()],\n        data: {\n          title: 'Sign Up',\n        },\n      })\n      .state('sign-in', {\n        url: '/sign-in',\n        template: '<div my-sign-in></div>',\n        onExit: ['Flash', Flash => Flash.clear()],\n        data: {\n          title: 'Sign In',\n        },\n      })\n      .state('profile', {\n        url: '/profile',\n        template: '<div my-user-profile></div>',\n        onExit: ['Flash', Flash => Flash.clear()],\n        data: {\n          title: 'Profile',\n        },\n      });\n  }\n}\n","{\n  angular\n    .module('meganote.users')\n    .service('UsersService', [\n      '$http',\n      'DATABASE_URL',\n      'AuthToken',\n      'CurrentUser',\n      ($http, DATABASE_URL, AuthToken, CurrentUser) => {\n        const usersURL = `${DATABASE_URL}users/`;\n\n        class UsersService {\n          // Sign Up\n          create(user) {\n            return $http\n              .post(usersURL, { user })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n          // Sign In\n          login(user) {\n            return $http\n              .post(`${DATABASE_URL}sessions/`, { user })\n              .then(\n                res => {\n                  AuthToken.set(res.data.authToken);\n                  CurrentUser.set(res.data.user);\n                }\n              );\n          }\n\n          // Update Profile\n          update(user) {\n            return $http\n              .put(`${usersURL}${user._id}`, { user })\n              .then(res => CurrentUser.set(res.data.user));\n          }\n        }\n\n        return new UsersService();\n      }\n    ]);\n}\n"],"sourceRoot":"/source/"}